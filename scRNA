library(Seurat)
library(ggplot2)
library(sctransform)
suppressPackageStartupMessages(library("argparse"))
# create parser object
parser <- ArgumentParser()
# specify our desired options 
# by default ArgumentParser will add an help option 
parser$add_argument("--min.cell", type="integer", default=3,
                    help="min number of cell [default %(default)s]",
                    metavar="number")
parser$add_argument("--min.feature", type="integer", default=200,
                    help="min number of nFeature_RNA [default %(default)s]",
                    metavar="number")
parser$add_argument("--variable.features.n", type="integer", default=3000,
                    help="# of variable features [default %(default)s]",
                    metavar="number")
parser$add_argument("--max.feature", type="integer", default=5000,
                    help="max number of nFeature_RNA [default %(default)s]",
                    metavar="number")
parser$add_argument("--pc.num", type="integer", default=30,
                    help="number of PCs used [default %(default)s]",
                    metavar="number")
parser$add_argument("--regress.type", type="integer", default=1,
                    help="types of regress [default %(default)s]",
                    metavar="number")
parser$add_argument("--resolution", type="double", default=0.25,
                    help="clustering resolution value [default %(default)s]",
                    metavar="number")
parser$add_argument("--mt.per", type="integer", default=5,
                    help="mt percentage [default %(default)s]",
                    metavar="number")
args <- parser$parse_args()

min.cell=args$min.cell
min.feature=args$min.feature
max.feature=args$max.feature
pc.num=args$pc.num
resolution=args$resolution
variable.features.n=args$variable.features.n
regress.type=args$regress.type
mt.per=args$mt.per
parameters=c(min.cell,min.feature,max.feature,pc.num,
             resolution,variable.features.n,regress.type,mt.per)
print(parameters)
suffix=paste(min.cell,min.feature,max.feature,pc.num,
             resolution,variable.features.n,regress.type,mt.per,sep="_")
print(suffix)
sample="drosophila"
dir="D:/elife/"
obj_data <- Read10X(data.dir = dir)
obj <- CreateSeuratObject(counts = obj_data,project = sample, min.cells = min.cell, min.features = min.feature)

# store mitochondrial percentage in object meta data
obj <- PercentageFeatureSet(obj, pattern = "^mt", col.name = "percent.mt")

#QC check before filtering
p0 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0)
pdf(paste0(sample,"_sctransform_QC_before.pdf"))
print(p0)
dev.off()

obj <- subset(obj, subset = nFeature_RNA > min.feature & nFeature_RNA < max.feature & percent.mt < mt.per)

# run sctransform
if(regress.type == 1){
  print("regress by nFeature_RNA, nCount_RNA, percent.mt")
  obj <- SCTransform(obj,variable.features.n=variable.features.n,
                     vars.to.regress = c("nFeature_RNA", "nCount_RNA", "percent.mt"), verbose = FALSE)
}
if(regress.type == 2){
  print("regress by nFeature_RNA, nCount_RNA")
  obj <- SCTransform(obj,variable.features.n=variable.features.n,
                     vars.to.regress = c("nFeature_RNA", "nCount_RNA"), verbose = FALSE)
}
if(regress.type == 3){
  print("regress by nCount_RNA")
  obj <- SCTransform(obj,variable.features.n=variable.features.n,
                     vars.to.regress = c("nCount_RNA"), verbose = FALSE)
}


# These are now standard steps in the Seurat workflow for visualization and clustering
obj <- RunPCA(obj, verbose = FALSE, npcs = pc.num)
obj <- RunUMAP(obj, dims = 1:pc.num, verbose = FALSE)
obj <- RunTSNE(obj, dims = 1:pc.num, verbose = FALSE)
obj <- FindNeighbors(obj, dims = 1:pc.num, verbose = FALSE)
obj <- FindClusters(obj,resolution = resolution,  verbose = FALSE)

p <- DimPlot(obj, label = TRUE, reduction="tsne") + NoLegend()
pdf(paste0(suffix,"_",sample,"_Cluster_tSNE_Plot.pdf"))
print(p)
dev.off()

p <- DimPlot(obj, label = TRUE, reduction="umap") + NoLegend()
pdf(paste0(suffix,"_",sample,"_Cluster_UMAP_Plot.pdf"))
print(p)
dev.off()


####library(Seurat)
library(ggplot2)
library(sctransform)
suppressPackageStartupMessages(library("argparse"))
# create parser object
parser <- ArgumentParser()
# specify our desired options 
# by default ArgumentParser will add an help option 
parser$add_argument("--min.cell", type="integer", default=3,
                    help="min number of cell [default %(default)s]",
                    metavar="number")
parser$add_argument("--min.feature", type="integer", default=200,
                    help="min number of nFeature_RNA [default %(default)s]",
                    metavar="number")
parser$add_argument("--variable.features.n", type="integer", default=3000,
                    help="# of variable features [default %(default)s]",
                    metavar="number")
parser$add_argument("--max.feature", type="integer", default=5000,
                    help="max number of nFeature_RNA [default %(default)s]",
                    metavar="number")
parser$add_argument("--pc.num", type="integer", default=30,
                    help="number of PCs used [default %(default)s]",
                    metavar="number")
parser$add_argument("--regress.type", type="integer", default=1,
                    help="types of regress [default %(default)s]",
                    metavar="number")
parser$add_argument("--resolution", type="double", default=0.25,
                    help="clustering resolution value [default %(default)s]",
                    metavar="number")
parser$add_argument("--mt.per", type="integer", default=5,
                    help="mt percentage [default %(default)s]",
                    metavar="number")
args <- parser$parse_args()

min.cell=args$min.cell
min.feature=args$min.feature
max.feature=args$max.feature
pc.num=args$pc.num
resolution=args$resolution
variable.features.n=args$variable.features.n
regress.type=args$regress.type
mt.per=args$mt.per
parameters=c(min.cell,min.feature,max.feature,pc.num,
             resolution,variable.features.n,regress.type,mt.per)
print(parameters)
suffix=paste(min.cell,min.feature,max.feature,pc.num,
             resolution,variable.features.n,regress.type,mt.per,sep="_")
print(suffix)
sample="drosophila"
dir="D:/elife/"
obj_data <- Read10X(data.dir = dir)
obj <- CreateSeuratObject(counts = obj_data,project = sample, min.cells = min.cell, min.features = min.feature)

# store mitochondrial percentage in object meta data
obj <- PercentageFeatureSet(obj, pattern = "^mt", col.name = "percent.mt")

#QC check before filtering
p0 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0)
pdf(paste0(sample,"_sctransform_QC_before.pdf"))
print(p0)
dev.off()

obj <- subset(obj, subset = nFeature_RNA > min.feature & nFeature_RNA < max.feature & percent.mt < mt.per)

# run sctransform
if(regress.type == 1){
  print("regress by nFeature_RNA, nCount_RNA, percent.mt")
  obj <- SCTransform(obj,variable.features.n=variable.features.n,
                     vars.to.regress = c("nFeature_RNA", "nCount_RNA", "percent.mt"), verbose = FALSE)
}
if(regress.type == 2){
  print("regress by nFeature_RNA, nCount_RNA")
  obj <- SCTransform(obj,variable.features.n=variable.features.n,
                     vars.to.regress = c("nFeature_RNA", "nCount_RNA"), verbose = FALSE)
}
if(regress.type == 3){
  print("regress by nCount_RNA")
  obj <- SCTransform(obj,variable.features.n=variable.features.n,
                     vars.to.regress = c("nCount_RNA"), verbose = FALSE)
}


# These are now standard steps in the Seurat workflow for visualization and clustering
obj <- RunPCA(obj, verbose = FALSE, npcs = pc.num)
obj <- RunUMAP(obj, dims = 1:pc.num, verbose = FALSE)
obj <- RunTSNE(obj, dims = 1:pc.num, verbose = FALSE)
obj <- FindNeighbors(obj, dims = 1:pc.num, verbose = FALSE)
obj <- FindClusters(obj,resolution = resolution,  verbose = FALSE)

p <- DimPlot(obj, label = TRUE, reduction="tsne") + NoLegend()
pdf(paste0(suffix,"_",sample,"_Cluster_tSNE_Plot.pdf"))
print(p)
dev.off()

p <- DimPlot(obj, label = TRUE, reduction="umap") + NoLegend()
pdf(paste0(suffix,"_",sample,"_Cluster_UMAP_Plot.pdf"))
print(p)
dev.off()


#### Look at the distribution of specific genes in a cell population

DotPlot(obj,features = "rna_CR46040")


markers <- c("Dl","esg","pros","AstA","NPF",
             "AstC","betaTry","Amy-p","Amy-d",
             "lambdaTry")
DotPlot(obj,features = markers)+coord_flip()

#### Use maker for comments
new.cluster.ids <- c("0"="ISC-EB", 
                     "1"="ISC-EB", 
                     "2"="ISC-EB", 
                     "3"="ISC-EB", 
                     "4"="ISC-EB", 
                     "5"="EC", 
                     "6"="EE", 
                     "7"="EE", 
                     "8"="EE"
                    )
scedata <- RenameIdents(obj, new.cluster.ids)                        
scedata$celltype <- scedata@active.ident
DotPlot(scedata,features = "rna_CR46040")

markers <- c("Dl","esg","pros","AstA","NPF",
             "AstC","betaTry","Amy-p","Amy-d",
             "lambdaTry")
DotPlot(scedata,features = markers)+coord_flip()

DimPlot(scedata, group.by = "celltype", reduction="tsne")


table(Idents(scedata), scedata$orig.ident)


Cellratio <- prop.table(table(Idents(scedata), scedata$orig.ident), margin = 2) #The proportion of different cell populations in each sample was calculated
Cellratio

Cellratio <- as.data.frame(Cellratio)
colourCount = length(unique(Cellratio$Var1))
library(ggplot2)
ggplot(Cellratio) + 
  geom_bar(aes(x =Var2, y= Freq, fill = Var1),stat = "identity",width = 0.7,size = 0.5,colour = '#222222')+ 
  theme_classic() +
  labs(x='Sample',y = 'Ratio')+
  coord_flip()+
  theme(panel.border = element_rect(fill=NA,color="black", size=0.5, linetype="solid"))

